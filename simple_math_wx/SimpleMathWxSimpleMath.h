#ifndef __SimpleMathWxSimpleMath__
#define __SimpleMathWxSimpleMath__

/**
@file
Subclass of SimpleMath, which is generated by wxFormBuilder.
*/

#include "SimpleMathWx.h"

//// end generated include

/** Implementing SimpleMath */
class SimpleMathWxSimpleMath : public SimpleMath, public wxThreadHelper
{
private:

	char m_data[1024 * 64] = {0};
	wxCriticalSection m_dataCS;

	const int total_questions = 100;
	int score = total_questions;

	const int op_sum_max_result = 20;
	const int op_sum_min_result = 2;

	const int op_sub_max_number_first = 20;
	const int op_sub_min_number_first = 5;

	const int sum = 0;
	const int sub = 1;

	time_t start_time = 0;

	int answer = 0;
	int questions = 0;
	bool started = false;

	void new_question()
	{
		m_answerText->Clear();
		auto questionNumberText = wxString::Format("No. %d", questions + 1);
		m_questionNumber->SetLabel(questionNumberText);
		const auto op = rand() % 2;

		auto x = 0;
		auto y = 0;

		if (op == sum)
		{
			const auto sum_result = rand() % (op_sum_max_result - op_sum_min_result) + op_sum_min_result + 1;
			x = rand() % (sum_result - 1) + 1;
			y = sum_result - x;
		}
		if (op == sub)
		{
			x = rand() % (op_sub_max_number_first - op_sub_min_number_first) + op_sub_min_number_first;
			y = rand() % (x - 1) + 1;
		}

		if (op == sum)
		{
			auto question = wxString::Format("%d + %d", x, y);
			m_questionText->SetLabel(question);
			answer = x + y;
		}
		if (op == sub)
		{
			auto question = wxString::Format("%d - %d", x, y);
			m_questionText->SetLabel(question);
			answer = x - y;
		}
	}

protected:
	void prepareNewExam()
	{
		started = false;
		m_eximTimer.Stop();
		const auto seed = (unsigned int)time(nullptr);
		srand(seed);
		m_restartButton->SetLabelText("Start");
		m_questionText->SetLabel("");
		m_notifyText->SetLabel("");
		m_timeUsed->SetLabel("");
		m_questionNumber->SetLabel("");
		m_answerText->Clear();
	}

	void stopExam()
	{
		m_notifyText->SetLabelText(wxString::Format("Score: %d", score));

		started = false;
		m_eximTimer.Stop();
		m_restartButton->SetLabelText("Start");
	}

	void onAnswerInput(wxCommandEvent& event) override
	{
		if (started == false)
		{
			return;
		}
		auto user_answer = m_answerText->GetValue();
		if(user_answer.empty())
		{
			return;
		}
		long user_answer_l = 0;
		if (!user_answer.ToLong(&user_answer_l, 10))
		{
			// score--;
			// m_notifyText->SetLabelText("Wrong!");
			return;
		}
		else
		{
			if (user_answer_l == answer)
			{
				m_notifyText->SetForegroundColour(wxColor(*wxGREEN));
				m_notifyText->SetLabelText("Right!");
			}
			else
			{
				score--;
				m_notifyText->SetForegroundColour(wxColor(*wxRED));
				m_notifyText->SetLabelText("Wrong!");
			}
		}
		questions++;
		if (questions >= total_questions)
		{
			stopExam();
		}
		else
		{
			new_question();
		}
	}

	void onRestartButtonClicked(wxCommandEvent& event) override
	{
		if (started == true)
		{
			prepareNewExam();
		}
		else
		{
			questions = 0;
			score = total_questions;
			start_time = time(nullptr);
			started = true;
			m_restartButton->SetLabelText("Stop");
			m_notifyText->SetLabelText("");
			m_eximTimer.Start(1000);
			new_question();
			m_answerText->SetFocus();
		}
	}

	void onEximTimerUpdate(wxTimerEvent& event) override
	{
		auto now = time(nullptr);
		auto timeUsedText = wxString::Format("Time: %d S", (int)(now - start_time));
		m_timeUsed->SetLabel(timeUsedText);
	}

	wxThread::ExitCode Entry() override
	{
		int offset = 0;
		while (!GetThread()->TestDestroy())
		{
			char buffer[1024] = {0};
			wxThread::Sleep(100);
			{
				wxCriticalSectionLocker lock(m_dataCS);
				memcpy(m_data, buffer, 1024);
				offset++;
			}
			wxQueueEvent(GetEventHandler(), new wxThreadEvent());
			if (offset > 10000)
			{
				break;
			}
		}
		return (wxThread::ExitCode)nullptr;
	}

public:
	void DoStartALongTask()
	{
		if (CreateThread(wxTHREAD_JOINABLE) != wxTHREAD_NO_ERROR)
		{
			wxLogError("Could not create worker thread!");
			return;
		}
		if (GetThread()->Run() != wxTHREAD_NO_ERROR)
		{
			wxLogError("Cloud not run the worker thread!");
			return;
		}
	}

	void OnClose(wxCloseEvent&)
	{
		if (GetThread() && GetThread()->IsRunning())
		{
			//GetThread()->Wait();
			GetThread()->Delete();
		}
		Destroy();
	}

	void OnThreadUpdate(wxThreadEvent& evt)
	{
		{
			wxCriticalSectionLocker lock(m_dataCS);
			//access m_data;
		}
		questions++;
		auto questionNumberText = wxString::Format("No. %d", questions + 1);
		m_questionNumber->SetLabel(questionNumberText);
	}

	/** Constructor */
	explicit SimpleMathWxSimpleMath(wxWindow* parent)
		: SimpleMath(parent)
	{
		Bind(wxEVT_THREAD, &SimpleMathWxSimpleMath::OnThreadUpdate, this);
		Bind(wxEVT_CLOSE_WINDOW, &SimpleMathWxSimpleMath::OnClose, this);
		prepareNewExam();
		//DoStartALongTask();
	}

	//// end generated class members
};

#endif // __SimpleMathWxSimpleMath__
